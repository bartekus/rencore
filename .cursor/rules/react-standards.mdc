# React Development Standards

Standards for React development in the frontend application.

<rule>
name: react_standards
description: Enforces React development standards and best practices
filters:
  # Match React component and hook files
  - type: file_extension
    pattern: "\\.(tsx|ts)$"
  # Match React imports and component definitions
  - type: content
    pattern: "(import.*?react|function.*?\\(\\).*?{|const.*?=.*?\\(\\).*?=>)"
  # Match file modifications
  - type: event
    pattern: "file_modify"

actions:
  - type: enforce
    conditions:
      # Enforce function component syntax
      - pattern: "class\\s+\\w+\\s+extends\\s+React\\.Component"
        message: "Use function components instead of class components"

      # Enforce proper hook naming
      - pattern: "const\\s+\\w+\\s*=\\s*use[a-z]"
        message: "Hook names must start with 'use' and be camelCase"

  - type: suggest
    message: |
      When writing React components:

      1. Component Structure:
         ```typescript
         import { type FC } from 'react';

         interface Props {
           // Define props interface
         }

         export const MyComponent: FC<Props> = ({ prop1, prop2 }) => {
           return (
             // JSX
           );
         };
         ```

      2. Hook Usage:
         - Use hooks at the top level
         - Follow hook naming convention (useMyHook)
         - Utilize built-in hooks appropriately
         ```typescript
         const MyComponent = () => {
           const [state, setState] = useState<Type>();
           const value = useContext(MyContext);

           useEffect(() => {
             // Side effects
           }, [dependencies]);
         };
         ```

      3. Performance Optimization:
         - Use memo for expensive renders
         - Utilize useCallback for function props
         - Implement useMemo for expensive calculations
         ```typescript
         const memoizedValue = useMemo(() => computeExpensiveValue(a, b), [a, b]);
         const memoizedCallback = useCallback((param) => doSomething(param), []);
         ```

      4. File Organization:
         - One component per file
         - Group related components in folders
         - Separate hooks into their own files
         - Use index.ts for exports

examples:
  - input: |
      # Bad: Class component
      class MyComponent extends React.Component {
        render() {
          return <div />;
        }
      }

      # Good: Function component
      const MyComponent: FC<Props> = ({ children }) => {
        return <div>{children}</div>;
      };

      # Bad: Hook naming
      const myCustomHook = () => {
        const [state, setState] = useState(null);
      };

      # Good: Hook naming
      const useCustomHook = () => {
        const [state, setState] = useState(null);
      };
    output: "Properly structured React code"

metadata:
  priority: high
  version: 1.0
</rule>
